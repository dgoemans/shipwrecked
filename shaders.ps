precision highp float;

uniform sampler2D sD;
uniform sampler2D sN;
uniform samplerCube sR;

varying vec2 vT;
varying vec3 vL;
varying vec4 vA;
varying vec4 vD;
varying vec3 vN;
varying vec3 vV;
varying vec3 vG;
varying vec3 vB;
varying float vX;

#ifdef bloom
void main(void)
{
    vec4 sum = vec4(0);
    vec2 tx = vec2(vT.s,vT.t);

    for(int i= -4 ;i < 4; i++)
    {
        for (int j = -3; j < 3; j++)
        {
            sum += texture2D(sD, tx + vec2(j, i)*0.003) * 0.18;
        }
    }
    if (texture2D(sD, tx).r < 0.4)
    {
       gl_FragColor = sum*sum*0.012 + texture2D(sD, tx);
    }
    else
    {
        if (texture2D(sD, tx).r < 0.6)
        {
            gl_FragColor = sum*sum*0.009 + texture2D(sD, tx);
        }
        else
        {
            gl_FragColor = sum*sum*0.0075 + texture2D(sD, tx);
        }
    }
}
#endif
#ifdef bumpmap
float AI = 0.5;

float sh = 100.0;
vec4 SC = vec4(1, 1, 1, 1);
float SI = 0.15;
float bC = 0.3;
float tB = 0.3;

void main()
{
    vec3 bN = vN;

    vec3 bump = bC * (texture2D(sN, vT.st).rgb - vec3(0.5, 0.5, 0.5));
    bN = bN + (bump.x * vG + bump.y * vB);
    bN = normalize(bN);

    vec3 dir = normalize(vL);
    float bI = max(0.0, dot(dir, bN));

    vec3 r = normalize(2.0 * bI * bN - dir);
    float dt = dot(r, vV);

    vec4 s = SI * SC * max(pow(abs(dt), sh), 0.0) * bI;

    vec4 t = texture2D(sD, vT.st);
    vec4 f = t * tB * bI + vA * AI + s;

    gl_FragColor = vec4(f.rgb, 1);

}
#endif
#ifdef fire

vec2 hash( vec2 p )
{
	p = vec2( dot(p,vec2(127.1,311.7)),
			 dot(p,vec2(269.5,183.3)) );
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p )
{
	const float K1 = 0.366025404; // (sqrt(3)-1)/2;
	const float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor( p + (p.x+p.y)*K1 );

	vec2 a = p - i + (i.x+i.y)*K2;
	vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);
	vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;

	vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

	return dot( n, vec3(70.0) );
}

float fbm(vec2 uv)
{
	float f;
	mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
	f  = 0.5000*noise( uv ); uv = m*uv;
	f += 0.2500*noise( uv ); uv = m*uv;
	f += 0.1250*noise( uv ); uv = m*uv;
	f += 0.0625*noise( uv ); uv = m*uv;
	f = 0.5 + 0.5*f;
	return f;
}

void main(void)
{
	vec2 uv = vT.st;
	vec2 q = uv;
	float strength = floor(q.x+1.0);
	float T3 = max(3.0,1.25*strength)*vX;
	q.x = mod(q.x,1.0)-0.5;
	q.y -= 0.25;
	float n = fbm(strength*q - vec2(0,T3));
	float c = 1.0 - 16.0 * pow( max( 0., length(q*vec2(1.8+q.y*1.5,1.15) ) - n * max( 0., q.y+0.25 ) ),1.2 );
	float c1 = n * c * (1.5-pow(1.0*uv.y,4.0));
	c1=clamp(c1,0.,1.0);

	vec3 col = vec3(1.5*c1, 1.5*c1*c1*c1, c1*c1*c1*c1*c1*c1);

	float a = c * (1.0-pow(uv.y,3.0));
	gl_FragColor = vec4(col,a);//vec4( mix(vec3(0.0),col,a), 1.0);
}
#endif
#ifdef unlit
void main(void)
{
    vec4 t = texture2D(sD, vec2(vT.s, vT.t));
    gl_FragColor = vec4(t.rgb, t.a);
}
#endif
#ifdef water
float sh = 50.0;
vec4 SC = vec4(1, 1, 1, 1);
float SI = 0.7;
float bC = 0.9;

float a = 0.9;

float mV = 0.01;
float mT = 15.0;
float rI = 0.3;

void main()
{
    vec2 c = vT.st;
    float mT = sin(vX/mT*3.14);
    c.s += mT*mV;
    c.t += mT*mV;

    vec3 bm = bC * (texture2D(sN, c).rgb - vec3(0.5, 0.5, 0.5));
    vec3 bN = vN + (bm.x * vG + bm.y * vB);
    bN = normalize(bN);

    vec3 dir = normalize(vL);
    float bI = max(0.0, dot(dir, bN));

    vec3 r = normalize(2.0 * bI * bN - dir);
    float dt = dot(r, vV);

    vec4 s = SI * SC * max(pow(abs(dt), sh), 0.0) * bI;

    vec3 r2 = -reflect(vV, bN);
    vec4 rS = textureCube(sR, r2);

    vec4 t = texture2D(sD, vT.st);
    t.a = 1.0;
    rS.a = 1.0;

    vec4 f = rI * rS + t * bI + s;

    gl_FragColor = vec4(f.rgb, a);

}
#endif